// <auto-generated />
using System;
using MOCA.Presistence.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MOCA.Presistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("IdentityUserLogin<string>", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("IdentityUserRole<string>", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("IdentityUserToken<string>", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.DynamicLists.WorkSpaceCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("WorkSpaceCategory", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.DynamicLists.WorkSpaceType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("WorkSpaceCategoryId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("WorkSpaceCategoryId");

                    b.ToTable("WorkSpaceType", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.EventSpaceBookings.ContactDetails", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long?>("BookATourId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<long?>("EventSpaceBookingId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileNumber")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("EventSpaceBookingId");

                    b.ToTable("ContactDetails", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.EventSpaceBookings.EmailTemplate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmailTemplateTypeID")
                        .HasColumnType("int");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmailTemplateTypeID");

                    b.ToTable("EmailTemplate", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.EventSpaceBookings.EmailTemplateType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EmailTemplateType", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.EventSpaceBookings.EventAttendance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("EventAttendance", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.EventSpaceBookings.EventCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("EventCategory", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.EventSpaceBookings.EventOpportunityStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("EventOpportunityStatus", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.EventSpaceBookings.EventReccurance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("EventReccurance", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.EventSpaceBookings.EventRequester", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("EventRequester", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.EventSpaceBookings.EventSpaceBooking", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("CompanyCommericalName")
                        .HasMaxLength(800)
                        .HasColumnType("nvarchar(800)");

                    b.Property<string>("CompanyFacebook")
                        .HasMaxLength(800)
                        .HasColumnType("nvarchar(800)");

                    b.Property<string>("CompanyInstgram")
                        .HasMaxLength(800)
                        .HasColumnType("nvarchar(800)");

                    b.Property<string>("CompanyLinkedin")
                        .HasMaxLength(800)
                        .HasColumnType("nvarchar(800)");

                    b.Property<string>("CompanyWebsite")
                        .HasMaxLength(800)
                        .HasColumnType("nvarchar(800)");

                    b.Property<string>("ContactEmail1")
                        .HasMaxLength(800)
                        .HasColumnType("nvarchar(800)");

                    b.Property<string>("ContactEmail2")
                        .HasMaxLength(800)
                        .HasColumnType("nvarchar(800)");

                    b.Property<string>("ContactFullName1")
                        .HasMaxLength(800)
                        .HasColumnType("nvarchar(800)");

                    b.Property<string>("ContactFullName2")
                        .HasMaxLength(800)
                        .HasColumnType("nvarchar(800)");

                    b.Property<string>("ContactMobile1")
                        .HasMaxLength(800)
                        .HasColumnType("nvarchar(800)");

                    b.Property<string>("ContactMobile2")
                        .HasMaxLength(800)
                        .HasColumnType("nvarchar(800)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("DoesYourEventSupportStartup")
                        .HasColumnType("bit");

                    b.Property<long?>("EventAttendanceId")
                        .HasColumnType("bigint");

                    b.Property<long?>("EventCategoryId")
                        .HasColumnType("bigint");

                    b.Property<string>("EventDescription")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("EventName")
                        .HasMaxLength(800)
                        .HasColumnType("nvarchar(800)");

                    b.Property<long?>("EventOpportunityStatusId")
                        .HasColumnType("bigint");

                    b.Property<long?>("EventReccuranceId")
                        .HasColumnType("bigint");

                    b.Property<long?>("EventRequesterId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<long?>("EventTypeId")
                        .HasColumnType("bigint");

                    b.Property<int?>("ExpectedNoAttend")
                        .HasColumnType("int");

                    b.Property<string>("IdentityUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("IndustryNameId")
                        .HasColumnType("bigint");

                    b.Property<long>("InitiatedId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsThereThirdPartyOrganizer")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("LobLocationTypeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LocationNameId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("NeedConsultancy")
                        .HasColumnType("bit");

                    b.Property<long?>("OpportunityStageId")
                        .HasColumnType("bigint");

                    b.Property<string>("OrgnizingCompany")
                        .HasMaxLength(800)
                        .HasColumnType("nvarchar(800)");

                    b.Property<string>("OtherEventCategory")
                        .HasMaxLength(800)
                        .HasColumnType("nvarchar(800)");

                    b.Property<string>("OtherIndustryName")
                        .HasMaxLength(800)
                        .HasColumnType("nvarchar(800)");

                    b.Property<string>("Platform")
                        .HasMaxLength(800)
                        .HasColumnType("nvarchar(800)");

                    b.Property<long?>("Revenue")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("SubmissionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EventAttendanceId");

                    b.HasIndex("EventCategoryId");

                    b.HasIndex("EventOpportunityStatusId");

                    b.HasIndex("EventReccuranceId");

                    b.HasIndex("EventRequesterId");

                    b.HasIndex("EventTypeId");

                    b.HasIndex("IndustryNameId");

                    b.HasIndex("InitiatedId");

                    b.HasIndex("LobLocationTypeId");

                    b.HasIndex("LocationNameId");

                    b.HasIndex("OpportunityStageId");

                    b.ToTable("EventSpaceBooking", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.EventSpaceBookings.EventSpaceTime", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("EventSpaceBookingId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecurrenceDay")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RecurrenceEndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RecurrenceEndTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RecurrenceStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RecurrenceStartTime")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EventSpaceBookingId");

                    b.ToTable("EventSpaceTime", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.EventSpaceBookings.EventSpaceVenues", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("EventSpaceBookingId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VenueName")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("EventSpaceBookingId");

                    b.ToTable("EventSpaceVenues", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.EventSpaceBookings.EventType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("EventType", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.EventSpaceBookings.Initiated", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("Initiated", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.EventSpaceBookings.OpportunityStage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("OpportunityStage", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.EventSpaceBookings.OpportunityStageReport", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Comment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<long>("EventSpaceBookingId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("OpportunityStageId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("Reminder")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EventSpaceBookingId");

                    b.HasIndex("OpportunityStageId");

                    b.ToTable("OpportunityStageReport", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.EventSpaceBookings.SendEmail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("BookATourId")
                        .HasColumnType("bigint");

                    b.Property<string>("CC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ContactDetailId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("EmailTemplateId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<long?>("EventSpaceBookingId")
                        .HasColumnType("bigint");

                    b.Property<string>("FromUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ContactDetailId");

                    b.HasIndex("EmailTemplateId");

                    b.HasIndex("EventSpaceBookingId");

                    b.ToTable("SendEmail", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.LocationManagment.Amenity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Amenity", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.LocationManagment.Building", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FemaleRestroomCount")
                        .HasColumnType("int");

                    b.Property<decimal>("GrossArea")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("InstallAccessPoint")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<int>("MaleRestroomCount")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("NetArea")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("Building", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.LocationManagment.BuildingFloor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("BuildingId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FemaleRestroomCount")
                        .HasColumnType("int");

                    b.Property<long>("FloorNumber")
                        .HasColumnType("bigint");

                    b.Property<decimal>("GrossArea")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("InstallAccessPoint")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaleRestroomCount")
                        .HasColumnType("int");

                    b.Property<decimal>("NetArea")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("BuildingId");

                    b.ToTable("BuildingFloor", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.LocationManagment.City", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("City", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.LocationManagment.Country", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryCodeString")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Country", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.LocationManagment.Coworking", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("InstallAccessPoint")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<int>("Occupancy")
                        .HasColumnType("int");

                    b.Property<int>("RemainingOccupancy")
                        .HasColumnType("int");

                    b.Property<int>("TailoredPercentage")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("Coworking", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.LocationManagment.CoworkingSpaceBundleMemberType", b =>
                {
                    b.Property<long>("CoworkSpaceBundleId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<long>("MemberTypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.HasKey("CoworkSpaceBundleId", "MemberTypeId");

                    b.HasIndex("MemberTypeId");

                    b.ToTable("CoworkingSpaceBundleMemberType", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.LocationManagment.CoworkingSpaceBundlePricing", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("BundleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CoworkingId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Deactivation")
                        .HasColumnType("datetime2");

                    b.Property<int>("DurationInDays")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfHours")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfUsers")
                        .HasColumnType("int");

                    b.Property<decimal>("PricePerHour")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CoworkingId");

                    b.ToTable("CoworkingSpaceBundlePricing", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.LocationManagment.CoWorkingSpaceHourlyPricing", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("CoworkingId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Hour")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PricePerHour")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("VoucherAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("VoucherPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CoworkingId");

                    b.ToTable("CoWorkingSpaceHourlyPricing", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.LocationManagment.CoworkingSpaceTailoredPricing", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("CoworkingId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HoursFrom")
                        .HasColumnType("int");

                    b.Property<int>("HoursTo")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PricePerHour")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("VoucherAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("VoucherPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CoworkingId");

                    b.ToTable("CoworkingSpaceTailoredPricing", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.LocationManagment.CoworkingWorkSpace", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("BuildingFloorId")
                        .HasColumnType("bigint");

                    b.Property<long>("CoworkingId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("GrossArea")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("InstallAccessPoint")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFurnishing")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<int>("MaximumOccupancy")
                        .HasColumnType("int");

                    b.Property<decimal?>("NetArea")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UnitNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("WorkSpaceCategoryId")
                        .HasColumnType("bigint");

                    b.Property<long>("WorkSpaceTypeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BuildingFloorId");

                    b.HasIndex("CoworkingId");

                    b.HasIndex("LocationId");

                    b.HasIndex("WorkSpaceCategoryId");

                    b.HasIndex("WorkSpaceTypeId");

                    b.ToTable("CoworkingWorkSpace", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.LocationManagment.Currency", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FlagCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Currency", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.LocationManagment.District", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("CityId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DistrictName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("District", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.LocationManagment.EventSpace", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("BuildingFloorId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("GrossArea")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("InstallAccessPoint")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("NetArea")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("RestRoomFemaleOccupancy")
                        .HasColumnType("int");

                    b.Property<int?>("RestRoomMaleOccupancy")
                        .HasColumnType("int");

                    b.Property<string>("TermsOfUse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UnitEBrochure")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UnitNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url360Tour")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BuildingFloorId");

                    b.HasIndex("LocationId");

                    b.ToTable("EventSpace", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.LocationManagment.EventSpaceHourlyPricing", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("EventSpaceId")
                        .HasColumnType("bigint");

                    b.Property<int>("Hours")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("MemberTypeId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("PricePerHour")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("EventSpaceId");

                    b.HasIndex("MemberTypeId");

                    b.ToTable("EventSpaceHourlyPricing", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.LocationManagment.EventSpaceOccupancy", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int>("CovidOccupancy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("EventSpaceId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaximumOccupancy")
                        .HasColumnType("int");

                    b.Property<long>("VenueSetupId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("EventSpaceId");

                    b.HasIndex("VenueSetupId");

                    b.ToTable("EventSpaceOccupancy", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.LocationManagment.FavouriteLocation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("BasicUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("LocationId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BasicUserId");

                    b.HasIndex("LocationId");

                    b.ToTable("FavouriteLocation", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.LocationManagment.Feature", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Feature", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.LocationManagment.Furnishing", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Dimensions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("FeatureId")
                        .HasColumnType("bigint");

                    b.Property<long>("FurnishingTypeId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Picture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("SpaceId")
                        .HasColumnType("bigint");

                    b.Property<string>("Specs")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Vendor")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FeatureId");

                    b.HasIndex("FurnishingTypeId");

                    b.ToTable("Furnishing", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.LocationManagment.FurnishingType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FurnishingType", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.LocationManagment.Inclusion", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Inclusion", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.LocationManagment.Industry", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Industry", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.LocationManagment.Location", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("About")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("AnnualIncrease")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("BuildYear")
                        .HasColumnType("int");

                    b.Property<long>("CityId")
                        .HasColumnType("bigint");

                    b.Property<string>("CommercialRegisterFile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CommercialRegisterNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ContractEndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ContractLength")
                        .HasColumnType("int");

                    b.Property<DateTime>("ContractStartDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("CopolitanShares")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CurrencyId")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("DirectCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("DistrictId")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("EstimatedAnnualizedAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("EstimatedContractAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("EstimatedRampUpAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("EventspaceLeaseContract")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("FullOccupancyMonthlyPayment")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("FullRampUpRevenue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("GracePeriod")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("GrossArea")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("InstallAccessPoint")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublish")
                        .HasColumnType("bit");

                    b.Property<decimal?>("LandlordAdditionalRevenue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("LandlordCommercialName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LandlordLegalName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("LandlordShares")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Latitude")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LaunchDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LocationBankAccountType")
                        .HasColumnType("int");

                    b.Property<long>("LocationTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Longitude")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MapAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("MinPaymentPerMonth")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("MinPaymentPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("MonthlyRentAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("MonthlyRevenue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("NetArea")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Overhead")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PartentershipType")
                        .HasColumnType("int");

                    b.Property<int?>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<int?>("PaymentTerm")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("PreOperationFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("PricePerMeter")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("RampUpPeriod")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("ServiceFeesAnnualIncrease")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("ServiceFeesPriceSqm")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("ServiceFeesTotalFees")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TaxIdFile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxIdNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Terms")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("TotalAfterDeductions")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("UtilizationPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("LocationTypeId");

                    b.ToTable("Location", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.LocationManagment.LocationBankAccount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LandlordBankAccountIBAN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LandlordBankAccountName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("LandlordBankAccountNumber")
                        .HasColumnType("bigint");

                    b.Property<string>("LandlordBankAccountSwift")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<string>("MocaBankAccountIBAN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MocaBankAccountName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("MocaBankAccountNumber")
                        .HasColumnType("bigint");

                    b.Property<string>("MocaBankAccountSwift")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SharedBankAccountIBAN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SharedBankAccountName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("SharedBankAccountNumber")
                        .HasColumnType("bigint");

                    b.Property<string>("SharedBankAccountSwift")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("LocationBankAccount", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.LocationManagment.LocationContact", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("LocationContact", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.LocationManagment.LocationCurrency", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CurrencyId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("LocationId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("LocationId");

                    b.ToTable("LocationCurrency", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.LocationManagment.LocationFeature", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("FeatureId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("LocationId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("FeatureId");

                    b.HasIndex("LocationId");

                    b.ToTable("LocationFeature", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.LocationManagment.LocationFile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocationContractFilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("LocationId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("LocationFile", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.LocationManagment.LocationImage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<string>("LocationImageFilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("LocationImage", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.LocationManagment.LocationInclusion", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("InclusionId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("LocationId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("InclusionId");

                    b.HasIndex("LocationId");

                    b.ToTable("LocationInclusion", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.LocationManagment.LocationIndustry", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("IndustryId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("LocationId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("IndustryId");

                    b.HasIndex("LocationId");

                    b.ToTable("LocationIndustry", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.LocationManagment.LocationType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LocationType", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.LocationManagment.LocationWorkingHour", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DayFrom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DayTo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EndWorkingHour")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<string>("StartWorkingHour")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("LocationWorkingHour", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.LocationManagment.MarketingImages", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("FeatureId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("SpaceId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("FeatureId");

                    b.ToTable("MarketingImages", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.LocationManagment.MeetingSpace", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("BuildingFloorId")
                        .HasColumnType("bigint");

                    b.Property<int?>("CovidOccupancy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("GrossArea")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("InstallAccessPoint")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFurnishing")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<int>("MaximumOccupancy")
                        .HasColumnType("int");

                    b.Property<decimal>("NetArea")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TermsOfUse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UnitEBrochure")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UnitNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url360Tour")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VenueName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BuildingFloorId");

                    b.HasIndex("LocationId");

                    b.ToTable("MeetingSpace", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.LocationManagment.MeetingSpaceHourlyPricing", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Hours")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("MeetingSpaceId")
                        .HasColumnType("bigint");

                    b.Property<long>("MemberTypeId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("PricePerHour")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("MeetingSpaceId");

                    b.HasIndex("MemberTypeId");

                    b.ToTable("MeetingSpaceHourlyPricing", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.LocationManagment.ServiceFeePaymentsDueDate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("LocationId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("ServiceFeePaymentsDueDate", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.LocationManagment.SpaceAmenity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("AmenityId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("FeatureId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("SpaceId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AmenityId");

                    b.HasIndex("FeatureId");

                    b.ToTable("SpaceAmenity", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.LocationManagment.VenueSetup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("VenueSetup", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.LocationManagment.WorkSpace", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("BuildingFloorId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("GrossArea")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("InstallAccessPoint")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFurnishing")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<int>("MaximumOccupancy")
                        .HasColumnType("int");

                    b.Property<decimal?>("NetArea")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UnitNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("WorkSpaceCategoryId")
                        .HasColumnType("bigint");

                    b.Property<long>("WorkSpaceTypeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BuildingFloorId");

                    b.HasIndex("LocationId");

                    b.HasIndex("WorkSpaceCategoryId");

                    b.HasIndex("WorkSpaceTypeId");

                    b.ToTable("WorkSpace", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.LocationManagment.WorkSpaceBundleMemberType", b =>
                {
                    b.Property<long>("WorkSpaceBundleId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<long>("MemberTypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.HasKey("WorkSpaceBundleId", "MemberTypeId");

                    b.HasIndex("MemberTypeId");

                    b.ToTable("WorkSpaceBundleMemberType", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.LocationManagment.WorkSpaceBundlePricing", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("BundleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Deactivation")
                        .HasColumnType("datetime2");

                    b.Property<int>("DurationInDays")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfHours")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfUsers")
                        .HasColumnType("int");

                    b.Property<decimal>("PricePerHour")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("WorkSpaceId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("WorkSpaceId");

                    b.ToTable("WorkSpaceBundlePricing", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.LocationManagment.WorkSpaceHourlyPricing", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Hour")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PricePerHour")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("VoucherAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("VoucherPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("WorkSpaceId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("WorkSpaceId");

                    b.ToTable("WorkSpaceHourlyPricing", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.LocationManagment.WorkSpaceTailoredPricing", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HoursFrom")
                        .HasColumnType("int");

                    b.Property<int>("HoursTo")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PricePerHour")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("VoucherAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("VoucherPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("WorkSpaceId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("WorkSpaceId");

                    b.ToTable("WorkSpaceTailoredPricing", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.MeetingSpaceReservation.MeetingAttendee", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("MeetingReservationId")
                        .HasColumnType("bigint");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MeetingReservationId");

                    b.ToTable("MeetingAttendee", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.MeetingSpaceReservation.MeetingReservation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("BasicUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateAndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<long>("MeetingSpaceHourlyPricingId")
                        .HasColumnType("bigint");

                    b.Property<long>("MeetingSpaceId")
                        .HasColumnType("bigint");

                    b.Property<int>("NumOfAttendees")
                        .HasColumnType("int");

                    b.Property<long?>("PaymentMethodId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BasicUserId");

                    b.HasIndex("LocationId");

                    b.HasIndex("MeetingSpaceHourlyPricingId");

                    b.HasIndex("MeetingSpaceId");

                    b.HasIndex("PaymentMethodId");

                    b.ToTable("MeetingReservation", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.MeetingSpaceReservation.MeetingReservationCancellation", b =>
                {
                    b.Property<long>("MeetingReservationId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<long>("CancellationId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.HasKey("MeetingReservationId", "CancellationId");

                    b.HasIndex("CancellationId");

                    b.HasIndex("MeetingReservationId")
                        .IsUnique();

                    b.ToTable("MeetingReservationCancellation", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.MeetingSpaceReservation.MeetingReservationTopUp", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long?>("BasicUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("MeetingReservationId")
                        .HasColumnType("bigint");

                    b.Property<long>("MeetingSpaceHourlyPricingId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PaymentMethodId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BasicUserId");

                    b.HasIndex("MeetingReservationId");

                    b.HasIndex("MeetingSpaceHourlyPricingId");

                    b.HasIndex("PaymentMethodId");

                    b.ToTable("MeetingReservationTopUp", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.MeetingSpaceReservation.MeetingReservationTransaction", b =>
                {
                    b.Property<long>("MeetingReservationId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<long>("ReservationTransactionId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MeetingReservationId", "ReservationTransactionId");

                    b.HasIndex("MeetingReservationId")
                        .IsUnique();

                    b.HasIndex("ReservationTransactionId");

                    b.ToTable("MeetingReservationTransaction", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.MocaSetting.CaseType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("CaseType", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.MocaSetting.Category", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("LobSpaceTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("LobSpaceTypeId");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.MocaSetting.Faq", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("CategoryId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("LobSpaceTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("LobSpaceTypeId");

                    b.ToTable("Faq", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.MocaSetting.IssueCaseStage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("LobSpaceTypeId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.HasKey("Id", "LastModifiedAt");

                    b.HasIndex("LobSpaceTypeId");

                    b.ToTable("IssueCaseStage", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.MocaSetting.IssueReport", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(2);

                    b.Property<string>("CaseDescription")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<long>("CaseTypeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ClosureDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("LevelSeverityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LobSpaceTypeId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<long>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("PriorityId")
                        .HasColumnType("bigint");

                    b.Property<long>("StatusId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id", "LastModifiedAt");

                    b.HasIndex("CaseTypeId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LevelSeverityId");

                    b.HasIndex("LobSpaceTypeId");

                    b.HasIndex("LocationId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("PriorityId");

                    b.HasIndex("StatusId");

                    b.ToTable("IssueReport", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.MocaSetting.Plan", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("LobSpaceTypeId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<string>("Points")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TermsOfUse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("WhatYouGet")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LobSpaceTypeId");

                    b.HasIndex("TypeId");

                    b.ToTable("Plan", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.MocaSetting.PlanType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("URL")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("PlanType", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.MocaSetting.Policy", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("LobSpaceTypeId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<long>("PolicyTypeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("LobSpaceTypeId");

                    b.HasIndex("PolicyTypeId");

                    b.ToTable("Policy", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.MocaSetting.PolicyType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("URL")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("PolicyType", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.MocaSetting.Priority", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("Priority", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.MocaSetting.Severity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("Severity", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.MocaSetting.Status", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("Status", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.MocaSetting.TopUp", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("LobSpaceTypeId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<string>("TermsOfUse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("TopUpTypeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("LobSpaceTypeId");

                    b.HasIndex("TopUpTypeId");

                    b.ToTable("TopUp", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.MocaSetting.TopUpType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("URL")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("TopUpType", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.MocaSetting.Wifi", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("LobSpaceTypeId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("LobSpaceTypeId");

                    b.ToTable("Wifi", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.Shared.MemberType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MemberType", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.Shared.Reservations.CancelReservation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("AdminId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("BasicUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CancelDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RefundReservationType")
                        .HasColumnType("int");

                    b.Property<long>("ReservationTargetId")
                        .HasColumnType("bigint");

                    b.Property<long>("ReservationTypeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("BasicUserId");

                    b.HasIndex("ReservationTypeId");

                    b.ToTable("CancelReservation", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.Shared.Reservations.PaymentMethod", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethod", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.Shared.Reservations.ReservationDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long?>("BasicUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ReservationTransactionId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("StartDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BasicUserId");

                    b.HasIndex("ReservationTransactionId");

                    b.ToTable("ReservationDetail", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.Shared.Reservations.ReservationTransaction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("BasicUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ExtendExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<long>("RemainingHours")
                        .HasColumnType("bigint");

                    b.Property<long>("ReservationTargetId")
                        .HasColumnType("bigint");

                    b.Property<long>("ReservationTypeId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TotalHours")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BasicUserId");

                    b.HasIndex("LocationId");

                    b.HasIndex("ReservationTypeId");

                    b.ToTable("ReservationTransaction", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.Shared.Reservations.ReservationType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("ReservationType", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.SSO.BasicUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool?>("Accept")
                        .IsRequired()
                        .HasColumnType("bit");

                    b.Property<string>("ActivationToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("GenderId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsQRVerifiedByAdmin")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsQRVerifiedByClient")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MemberID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("MemberShipTypesId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("MembershipActivationDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("MembershipCategoryId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MembershipTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePhoto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("StatusUser")
                        .IsRequired()
                        .HasColumnType("bit");

                    b.Property<long?>("UserDeviceId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("WalletBalance")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("GenderId");

                    b.HasIndex("MemberShipTypesId");

                    b.HasIndex("MembershipCategoryId");

                    b.HasIndex("UserDeviceId")
                        .IsUnique()
                        .HasFilter("[UserDeviceId] IS NOT NULL");

                    b.ToTable("BasicUser", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.SSO.ClientDevice", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long?>("BasicUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeviceType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NotificationToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OS")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OTP")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("OTPDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UniqulyIdentifier")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ClientDevice", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.SSO.Gender", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Gender", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.SSO.Identity.Admin", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("First_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Last_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Admin", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.SSO.Identity.AdminRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AdminRole", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.SSO.Identity.AdminRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool?>("Selected")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AdminRoleClaim", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.SSO.Identity.AdminUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Selected")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AdminUserClaim", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.SSO.MemberShipBenefitsTypes", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MemberShipBenefitsTypes", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.SSO.MemberShipCategories", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("BenefitTypeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStatic")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("MainCategoryId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BenefitTypeId");

                    b.HasIndex("MainCategoryId");

                    b.ToTable("MemberShipCategories", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.SSO.MemberShipMainCategories", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MemberShipMainCategories", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.SSO.MemberShipTypes", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MemberShipTypes", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.WorkSpaceReservations.CoWorkSpace.CoworkingSpaceBundleCancellation", b =>
                {
                    b.Property<long>("CoworkingSpaceReservationBundleId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<long>("CancellationId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.HasKey("CoworkingSpaceReservationBundleId", "CancellationId");

                    b.HasIndex("CancellationId")
                        .IsUnique();

                    b.HasIndex("CoworkingSpaceReservationBundleId")
                        .IsUnique();

                    b.ToTable("CoworkingSpaceBundleCancellation", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.WorkSpaceReservations.CoWorkSpace.CoworkingSpaceBundleTransaction", b =>
                {
                    b.Property<long>("CoworkingSpaceReservationBundleId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<long>("ReservationTransactionId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.HasKey("CoworkingSpaceReservationBundleId", "ReservationTransactionId");

                    b.HasIndex("CoworkingSpaceReservationBundleId")
                        .IsUnique();

                    b.HasIndex("ReservationTransactionId")
                        .IsUnique();

                    b.ToTable("CoworkingSpaceBundleTransaction", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.WorkSpaceReservations.CoWorkSpace.CoworkingSpaceHourlyCancellation", b =>
                {
                    b.Property<long>("CoworkingSpaceReservationHourlyId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<long>("CancellationId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.HasKey("CoworkingSpaceReservationHourlyId", "CancellationId");

                    b.HasIndex("CancellationId")
                        .IsUnique();

                    b.HasIndex("CoworkingSpaceReservationHourlyId")
                        .IsUnique();

                    b.ToTable("CoworkingSpaceHourlyCancellation", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.WorkSpaceReservations.CoWorkSpace.CoworkingSpaceHourlyTop", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("CoworkingSpaceReservationHourlyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<long>("HourId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("HourlyTotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("PaymentMethodId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CoworkingSpaceReservationHourlyId");

                    b.HasIndex("HourId");

                    b.HasIndex("PaymentMethodId");

                    b.ToTable("CoworkingSpaceHourlyTop", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.WorkSpaceReservations.CoWorkSpace.CoworkingSpaceHourlyTransaction", b =>
                {
                    b.Property<long>("CoworkingSpaceReservationHourlyId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<long>("ReservationTransactionId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.HasKey("CoworkingSpaceReservationHourlyId", "ReservationTransactionId");

                    b.HasIndex("CoworkingSpaceReservationHourlyId")
                        .IsUnique();

                    b.HasIndex("ReservationTransactionId")
                        .IsUnique();

                    b.ToTable("CoworkingSpaceHourlyTransaction", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.WorkSpaceReservations.CoWorkSpace.CoworkingSpaceReservationBundle", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("BasicUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("BundleEndDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("BundleId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("BundlePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("BundleStartDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("CoworkSpaceId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CoworkingId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PaymentMethodId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BasicUserId");

                    b.HasIndex("BundleId");

                    b.HasIndex("CoworkSpaceId");

                    b.HasIndex("CoworkingId");

                    b.HasIndex("LocationId");

                    b.HasIndex("PaymentMethodId");

                    b.ToTable("CoworkingSpaceReservationBundle", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.WorkSpaceReservations.CoWorkSpace.CoworkingSpaceReservationHourly", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("BasicUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("CoworkSpaceId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CoworkingId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<long>("HourId")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("HourlyDiscount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsDay")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PaymentMethodId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("BasicUserId");

                    b.HasIndex("CoworkSpaceId");

                    b.HasIndex("CoworkingId");

                    b.HasIndex("HourId");

                    b.HasIndex("LocationId");

                    b.HasIndex("PaymentMethodId");

                    b.ToTable("CoworkingSpaceReservationHourly", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.WorkSpaceReservations.CoWorkSpace.CoworkingSpaceReservationTailored", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("BasicUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("CoworkSpaceId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CoworkingId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PaymentMethodId")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("TailoredDiscount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("TailoredEndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TailoredHours")
                        .HasColumnType("int");

                    b.Property<decimal>("TailoredPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("TailoredStartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BasicUserId");

                    b.HasIndex("CoworkSpaceId");

                    b.HasIndex("CoworkingId");

                    b.HasIndex("LocationId");

                    b.HasIndex("PaymentMethodId");

                    b.ToTable("CoworkingSpaceReservationTailored", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.WorkSpaceReservations.CoWorkSpace.CoworkingSpaceTailoredCancellation", b =>
                {
                    b.Property<long>("CoworkingSpaceReservationTailoredId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<long>("CancellationId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.HasKey("CoworkingSpaceReservationTailoredId", "CancellationId");

                    b.HasIndex("CancellationId")
                        .IsUnique();

                    b.HasIndex("CoworkingSpaceReservationTailoredId")
                        .IsUnique();

                    b.ToTable("CoworkingSpaceTailoredCancellation", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.WorkSpaceReservations.CoWorkSpace.CoworkingSpaceTailoredTopUp", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("CoworkingSpaceReservationTailoredId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("PaymentMethodId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<int>("TailoredHours")
                        .HasColumnType("int");

                    b.Property<decimal>("TailoredPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CoworkingSpaceReservationTailoredId");

                    b.HasIndex("PaymentMethodId");

                    b.ToTable("CoworkingSpaceTailoredTopUp", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.WorkSpaceReservations.CoWorkSpace.CoworkingSpaceTailoredTransaction", b =>
                {
                    b.Property<long>("CoworkingSpaceReservationTailoredId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<long>("ReservationTransactionId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.HasKey("CoworkingSpaceReservationTailoredId", "ReservationTransactionId");

                    b.HasIndex("CoworkingSpaceReservationTailoredId")
                        .IsUnique();

                    b.HasIndex("ReservationTransactionId")
                        .IsUnique();

                    b.ToTable("CoworkingSpaceTailoredTransaction", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.WorkSpaceReservations.WorkSpaces.WorkSpaceBundleCancellation", b =>
                {
                    b.Property<long>("WorkSpaceBundleReservationId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<long>("CancellationId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.HasKey("WorkSpaceBundleReservationId", "CancellationId");

                    b.HasIndex("CancellationId")
                        .IsUnique();

                    b.HasIndex("WorkSpaceBundleReservationId")
                        .IsUnique();

                    b.ToTable("WorkSpaceBundleCancellation", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.WorkSpaceReservations.WorkSpaces.WorkSpaceBundleTransaction", b =>
                {
                    b.Property<long>("WorkSpaceReservationBundleId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<long>("ReservationTransactionId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.HasKey("WorkSpaceReservationBundleId", "ReservationTransactionId");

                    b.HasIndex("ReservationTransactionId")
                        .IsUnique();

                    b.HasIndex("WorkSpaceReservationBundleId")
                        .IsUnique();

                    b.ToTable("WorkSpaceBundleTransaction", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.WorkSpaceReservations.WorkSpaces.WorkSpaceHourlyCancellation", b =>
                {
                    b.Property<long>("WorkSpaceHourlyReservationId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<long>("CancellationId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.HasKey("WorkSpaceHourlyReservationId", "CancellationId");

                    b.HasIndex("CancellationId")
                        .IsUnique();

                    b.HasIndex("WorkSpaceHourlyReservationId")
                        .IsUnique();

                    b.ToTable("WorkSpaceHourlyCancellation", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.WorkSpaceReservations.WorkSpaces.WorkSpaceHourlyTopUp", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long?>("BasicUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<long>("HourId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("HourlyTotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("PaymentMethodId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<long>("WorkSpaceReservationHourlyId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BasicUserId");

                    b.HasIndex("HourId");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("WorkSpaceReservationHourlyId");

                    b.ToTable("WorkSpaceHourlyTopUp", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.WorkSpaceReservations.WorkSpaces.WorkSpaceHourlyTransaction", b =>
                {
                    b.Property<long>("WorkSpaceReservationHourlyId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<long>("ReservationTransactionId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.HasKey("WorkSpaceReservationHourlyId", "ReservationTransactionId");

                    b.HasIndex("ReservationTransactionId")
                        .IsUnique();

                    b.HasIndex("WorkSpaceReservationHourlyId")
                        .IsUnique();

                    b.ToTable("WorkSpaceHourlyTransaction", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.WorkSpaceReservations.WorkSpaces.WorkSpaceReservationBundle", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("BasicUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("BundleEndDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("BundleId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("BundlePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("BundleStartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PaymentMethodId")
                        .HasColumnType("bigint");

                    b.Property<long>("WorkSpaceId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BasicUserId");

                    b.HasIndex("BundleId");

                    b.HasIndex("LocationId");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("WorkSpaceId");

                    b.ToTable("WorkSpaceReservationBundle", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.WorkSpaceReservations.WorkSpaces.WorkSpaceReservationHourly", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("BasicUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<long>("HourId")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("HourlyDiscount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsDay")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PaymentMethodId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("WorkSpaceId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BasicUserId");

                    b.HasIndex("HourId");

                    b.HasIndex("LocationId");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("WorkSpaceId");

                    b.ToTable("WorkSpaceReservationHourly", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.WorkSpaceReservations.WorkSpaces.WorkSpaceReservationTailored", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("BasicUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PaymentMethodId")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("TailoredDiscount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("TailoredEndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TailoredHours")
                        .HasColumnType("int");

                    b.Property<decimal>("TailoredPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("TailoredStartDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("WorkSpaceId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BasicUserId");

                    b.HasIndex("LocationId");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("WorkSpaceId");

                    b.ToTable("WorkSpaceReservationTailored", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.WorkSpaceReservations.WorkSpaces.WorkSpaceTailoredCancellation", b =>
                {
                    b.Property<long>("WorkSpaceTailoredReservationId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<long>("CancellationId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.HasKey("WorkSpaceTailoredReservationId", "CancellationId");

                    b.HasIndex("CancellationId")
                        .IsUnique();

                    b.HasIndex("WorkSpaceTailoredReservationId")
                        .IsUnique();

                    b.ToTable("WorkSpaceTailoredCancellation", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.WorkSpaceReservations.WorkSpaces.WorkSpaceTailoredTopUp", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long?>("BasicUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("PaymentMethodId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<int>("TailoredHours")
                        .HasColumnType("int");

                    b.Property<decimal>("TailoredPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("WorkSpaceReservationTailoredId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BasicUserId");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("WorkSpaceReservationTailoredId");

                    b.ToTable("WorkSpaceTailoredTopUp", (string)null);
                });

            modelBuilder.Entity("MOCA.Core.Entities.WorkSpaceReservations.WorkSpaces.WorkSpaceTailoredTransaction", b =>
                {
                    b.Property<long>("WorkSpaceReservationTailoredId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<long>("ReservationTransactionId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.HasKey("WorkSpaceReservationTailoredId", "ReservationTransactionId");

                    b.HasIndex("ReservationTransactionId")
                        .IsUnique();

                    b.HasIndex("WorkSpaceReservationTailoredId")
                        .IsUnique();

                    b.ToTable("WorkSpaceTailoredTransaction", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MOCA.Core.Entities.SSO.Identity.Admin", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("MOCA.Core.Entities.SSO.Identity.AdminRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOCA.Core.Entities.SSO.Identity.Admin", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MOCA.Core.Entities.SSO.Identity.Admin", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MOCA.Core.Entities.DynamicLists.WorkSpaceType", b =>
                {
                    b.HasOne("MOCA.Core.Entities.DynamicLists.WorkSpaceCategory", "WorkSpaceCategory")
                        .WithMany("WorkSpaceTypes")
                        .HasForeignKey("WorkSpaceCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("WorkSpaceCategory");
                });

            modelBuilder.Entity("MOCA.Core.Entities.EventSpaceBookings.ContactDetails", b =>
                {
                    b.HasOne("MOCA.Core.Entities.EventSpaceBookings.EventSpaceBooking", "EventSpaceBooking")
                        .WithMany()
                        .HasForeignKey("EventSpaceBookingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EventSpaceBooking");
                });

            modelBuilder.Entity("MOCA.Core.Entities.EventSpaceBookings.EmailTemplate", b =>
                {
                    b.HasOne("MOCA.Core.Entities.EventSpaceBookings.EmailTemplateType", "EmailTemplateType")
                        .WithMany()
                        .HasForeignKey("EmailTemplateTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EmailTemplateType");
                });

            modelBuilder.Entity("MOCA.Core.Entities.EventSpaceBookings.EventSpaceBooking", b =>
                {
                    b.HasOne("MOCA.Core.Entities.EventSpaceBookings.EventAttendance", "EventAttendance")
                        .WithMany("EventSpaceBookings")
                        .HasForeignKey("EventAttendanceId");

                    b.HasOne("MOCA.Core.Entities.EventSpaceBookings.EventCategory", "EventCategory")
                        .WithMany("EventSpaceBookings")
                        .HasForeignKey("EventCategoryId");

                    b.HasOne("MOCA.Core.Entities.EventSpaceBookings.EventOpportunityStatus", "EventOpportunityStatus")
                        .WithMany("EventSpaceBookings")
                        .HasForeignKey("EventOpportunityStatusId");

                    b.HasOne("MOCA.Core.Entities.EventSpaceBookings.EventReccurance", "EventReccurance")
                        .WithMany("EventSpaceBookings")
                        .HasForeignKey("EventReccuranceId");

                    b.HasOne("MOCA.Core.Entities.EventSpaceBookings.EventRequester", "EventRequester")
                        .WithMany("EventSpaceBookings")
                        .HasForeignKey("EventRequesterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOCA.Core.Entities.EventSpaceBookings.EventType", "EventType")
                        .WithMany("EventSpaceBookings")
                        .HasForeignKey("EventTypeId");

                    b.HasOne("MOCA.Core.Entities.LocationManagment.Industry", "Industry")
                        .WithMany("EventSpaceBookings")
                        .HasForeignKey("IndustryNameId");

                    b.HasOne("MOCA.Core.Entities.EventSpaceBookings.Initiated", "Initiated")
                        .WithMany("EventSpaceBookings")
                        .HasForeignKey("InitiatedId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOCA.Core.Entities.LocationManagment.LocationType", "LocationType")
                        .WithMany("EventSpaceBookings")
                        .HasForeignKey("LobLocationTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOCA.Core.Entities.LocationManagment.Location", "Location")
                        .WithMany("EventSpaceBookings")
                        .HasForeignKey("LocationNameId");

                    b.HasOne("MOCA.Core.Entities.EventSpaceBookings.OpportunityStage", "OpportunityStage")
                        .WithMany()
                        .HasForeignKey("OpportunityStageId");

                    b.Navigation("EventAttendance");

                    b.Navigation("EventCategory");

                    b.Navigation("EventOpportunityStatus");

                    b.Navigation("EventReccurance");

                    b.Navigation("EventRequester");

                    b.Navigation("EventType");

                    b.Navigation("Industry");

                    b.Navigation("Initiated");

                    b.Navigation("Location");

                    b.Navigation("LocationType");

                    b.Navigation("OpportunityStage");
                });

            modelBuilder.Entity("MOCA.Core.Entities.EventSpaceBookings.EventSpaceTime", b =>
                {
                    b.HasOne("MOCA.Core.Entities.EventSpaceBookings.EventSpaceBooking", "EventSpaceBooking")
                        .WithMany("EventSpaceTimes")
                        .HasForeignKey("EventSpaceBookingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EventSpaceBooking");
                });

            modelBuilder.Entity("MOCA.Core.Entities.EventSpaceBookings.EventSpaceVenues", b =>
                {
                    b.HasOne("MOCA.Core.Entities.EventSpaceBookings.EventSpaceBooking", "EventSpaceBooking")
                        .WithMany("EventSpaceVenues")
                        .HasForeignKey("EventSpaceBookingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EventSpaceBooking");
                });

            modelBuilder.Entity("MOCA.Core.Entities.EventSpaceBookings.OpportunityStageReport", b =>
                {
                    b.HasOne("MOCA.Core.Entities.EventSpaceBookings.EventSpaceBooking", "EventSpaceBooking")
                        .WithMany()
                        .HasForeignKey("EventSpaceBookingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOCA.Core.Entities.EventSpaceBookings.OpportunityStage", "OpportunityStage")
                        .WithMany("OpportunityStageReports")
                        .HasForeignKey("OpportunityStageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EventSpaceBooking");

                    b.Navigation("OpportunityStage");
                });

            modelBuilder.Entity("MOCA.Core.Entities.EventSpaceBookings.SendEmail", b =>
                {
                    b.HasOne("MOCA.Core.Entities.EventSpaceBookings.ContactDetails", "ContactDetail")
                        .WithMany("SendEmails")
                        .HasForeignKey("ContactDetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOCA.Core.Entities.EventSpaceBookings.EmailTemplate", "EmailTemplate")
                        .WithMany()
                        .HasForeignKey("EmailTemplateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOCA.Core.Entities.EventSpaceBookings.EventSpaceBooking", "EventSpaceBooking")
                        .WithMany("SendEmails")
                        .HasForeignKey("EventSpaceBookingId");

                    b.Navigation("ContactDetail");

                    b.Navigation("EmailTemplate");

                    b.Navigation("EventSpaceBooking");
                });

            modelBuilder.Entity("MOCA.Core.Entities.LocationManagment.Building", b =>
                {
                    b.HasOne("MOCA.Core.Entities.LocationManagment.Location", "Location")
                        .WithMany("Buildings")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("MOCA.Core.Entities.LocationManagment.BuildingFloor", b =>
                {
                    b.HasOne("MOCA.Core.Entities.LocationManagment.Building", "Building")
                        .WithMany("BuildingFloors")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Building");
                });

            modelBuilder.Entity("MOCA.Core.Entities.LocationManagment.City", b =>
                {
                    b.HasOne("MOCA.Core.Entities.LocationManagment.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("MOCA.Core.Entities.LocationManagment.Coworking", b =>
                {
                    b.HasOne("MOCA.Core.Entities.LocationManagment.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("MOCA.Core.Entities.LocationManagment.CoworkingSpaceBundleMemberType", b =>
                {
                    b.HasOne("MOCA.Core.Entities.LocationManagment.CoworkingSpaceBundlePricing", "CoworkingSpaceBundlePricing")
                        .WithMany()
                        .HasForeignKey("CoworkSpaceBundleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOCA.Core.Entities.Shared.MemberType", "MemberType")
                        .WithMany("CoworkingSpaceBundleMemberTypes")
                        .HasForeignKey("MemberTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CoworkingSpaceBundlePricing");

                    b.Navigation("MemberType");
                });

            modelBuilder.Entity("MOCA.Core.Entities.LocationManagment.CoworkingSpaceBundlePricing", b =>
                {
                    b.HasOne("MOCA.Core.Entities.LocationManagment.Coworking", "Coworking")
                        .WithMany("CoworkingSpaceBundlePricings")
                        .HasForeignKey("CoworkingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Coworking");
                });

            modelBuilder.Entity("MOCA.Core.Entities.LocationManagment.CoWorkingSpaceHourlyPricing", b =>
                {
                    b.HasOne("MOCA.Core.Entities.LocationManagment.Coworking", "Coworking")
                        .WithMany("CoWorkingSpaceHourlyPricings")
                        .HasForeignKey("CoworkingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Coworking");
                });

            modelBuilder.Entity("MOCA.Core.Entities.LocationManagment.CoworkingSpaceTailoredPricing", b =>
                {
                    b.HasOne("MOCA.Core.Entities.LocationManagment.Coworking", "Coworking")
                        .WithMany("CoworkingSpaceTailoredPricings")
                        .HasForeignKey("CoworkingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Coworking");
                });

            modelBuilder.Entity("MOCA.Core.Entities.LocationManagment.CoworkingWorkSpace", b =>
                {
                    b.HasOne("MOCA.Core.Entities.LocationManagment.BuildingFloor", "BuildingFloor")
                        .WithMany()
                        .HasForeignKey("BuildingFloorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOCA.Core.Entities.LocationManagment.Coworking", "Coworking")
                        .WithMany()
                        .HasForeignKey("CoworkingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOCA.Core.Entities.LocationManagment.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOCA.Core.Entities.DynamicLists.WorkSpaceCategory", "WorkSpaceCategory")
                        .WithMany()
                        .HasForeignKey("WorkSpaceCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOCA.Core.Entities.DynamicLists.WorkSpaceType", "WorkSpaceType")
                        .WithMany()
                        .HasForeignKey("WorkSpaceTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BuildingFloor");

                    b.Navigation("Coworking");

                    b.Navigation("Location");

                    b.Navigation("WorkSpaceCategory");

                    b.Navigation("WorkSpaceType");
                });

            modelBuilder.Entity("MOCA.Core.Entities.LocationManagment.District", b =>
                {
                    b.HasOne("MOCA.Core.Entities.LocationManagment.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("MOCA.Core.Entities.LocationManagment.EventSpace", b =>
                {
                    b.HasOne("MOCA.Core.Entities.LocationManagment.BuildingFloor", "BuildingFloor")
                        .WithMany()
                        .HasForeignKey("BuildingFloorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOCA.Core.Entities.LocationManagment.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BuildingFloor");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("MOCA.Core.Entities.LocationManagment.EventSpaceHourlyPricing", b =>
                {
                    b.HasOne("MOCA.Core.Entities.LocationManagment.EventSpace", "EventSpace")
                        .WithMany("EventSpaceHourlyPricings")
                        .HasForeignKey("EventSpaceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOCA.Core.Entities.Shared.MemberType", "MemberType")
                        .WithMany()
                        .HasForeignKey("MemberTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EventSpace");

                    b.Navigation("MemberType");
                });

            modelBuilder.Entity("MOCA.Core.Entities.LocationManagment.EventSpaceOccupancy", b =>
                {
                    b.HasOne("MOCA.Core.Entities.LocationManagment.EventSpace", "EventSpace")
                        .WithMany("EventSpaceOccupancies")
                        .HasForeignKey("EventSpaceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOCA.Core.Entities.LocationManagment.VenueSetup", "VenueSetup")
                        .WithMany()
                        .HasForeignKey("VenueSetupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EventSpace");

                    b.Navigation("VenueSetup");
                });

            modelBuilder.Entity("MOCA.Core.Entities.LocationManagment.FavouriteLocation", b =>
                {
                    b.HasOne("MOCA.Core.Entities.SSO.BasicUser", "BasicUser")
                        .WithMany()
                        .HasForeignKey("BasicUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOCA.Core.Entities.LocationManagment.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BasicUser");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("MOCA.Core.Entities.LocationManagment.Furnishing", b =>
                {
                    b.HasOne("MOCA.Core.Entities.LocationManagment.Feature", "Feature")
                        .WithMany("Furnishings")
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOCA.Core.Entities.LocationManagment.FurnishingType", "FurnishingType")
                        .WithMany("Furnishings")
                        .HasForeignKey("FurnishingTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Feature");

                    b.Navigation("FurnishingType");
                });

            modelBuilder.Entity("MOCA.Core.Entities.LocationManagment.Location", b =>
                {
                    b.HasOne("MOCA.Core.Entities.LocationManagment.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOCA.Core.Entities.LocationManagment.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOCA.Core.Entities.LocationManagment.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOCA.Core.Entities.LocationManagment.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOCA.Core.Entities.LocationManagment.LocationType", "LocationType")
                        .WithMany()
                        .HasForeignKey("LocationTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Country");

                    b.Navigation("Currency");

                    b.Navigation("District");

                    b.Navigation("LocationType");
                });

            modelBuilder.Entity("MOCA.Core.Entities.LocationManagment.LocationBankAccount", b =>
                {
                    b.HasOne("MOCA.Core.Entities.LocationManagment.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("MOCA.Core.Entities.LocationManagment.LocationContact", b =>
                {
                    b.HasOne("MOCA.Core.Entities.LocationManagment.Location", "Location")
                        .WithMany("LocationContacts")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("MOCA.Core.Entities.LocationManagment.LocationCurrency", b =>
                {
                    b.HasOne("MOCA.Core.Entities.LocationManagment.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOCA.Core.Entities.LocationManagment.Location", "Location")
                        .WithMany("LocationCurrencies")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("MOCA.Core.Entities.LocationManagment.LocationFeature", b =>
                {
                    b.HasOne("MOCA.Core.Entities.LocationManagment.Feature", "Feature")
                        .WithMany()
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOCA.Core.Entities.LocationManagment.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Feature");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("MOCA.Core.Entities.LocationManagment.LocationFile", b =>
                {
                    b.HasOne("MOCA.Core.Entities.LocationManagment.Location", "Location")
                        .WithMany("LocationFiles")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("MOCA.Core.Entities.LocationManagment.LocationImage", b =>
                {
                    b.HasOne("MOCA.Core.Entities.LocationManagment.Location", "Location")
                        .WithMany("LocationImages")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("MOCA.Core.Entities.LocationManagment.LocationInclusion", b =>
                {
                    b.HasOne("MOCA.Core.Entities.LocationManagment.Inclusion", "Inclusion")
                        .WithMany()
                        .HasForeignKey("InclusionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOCA.Core.Entities.LocationManagment.Location", "Location")
                        .WithMany("LocationInclusions")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Inclusion");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("MOCA.Core.Entities.LocationManagment.LocationIndustry", b =>
                {
                    b.HasOne("MOCA.Core.Entities.LocationManagment.Industry", "Industry")
                        .WithMany("LocationIndustrys")
                        .HasForeignKey("IndustryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOCA.Core.Entities.LocationManagment.Location", "Location")
                        .WithMany("LocationIndustries")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Industry");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("MOCA.Core.Entities.LocationManagment.LocationWorkingHour", b =>
                {
                    b.HasOne("MOCA.Core.Entities.LocationManagment.Location", "Location")
                        .WithMany("LocationWorkingHours")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("MOCA.Core.Entities.LocationManagment.MarketingImages", b =>
                {
                    b.HasOne("MOCA.Core.Entities.LocationManagment.Feature", "Feature")
                        .WithMany("MarketingImages")
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Feature");
                });

            modelBuilder.Entity("MOCA.Core.Entities.LocationManagment.MeetingSpace", b =>
                {
                    b.HasOne("MOCA.Core.Entities.LocationManagment.BuildingFloor", "BuildingFloor")
                        .WithMany()
                        .HasForeignKey("BuildingFloorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOCA.Core.Entities.LocationManagment.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BuildingFloor");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("MOCA.Core.Entities.LocationManagment.MeetingSpaceHourlyPricing", b =>
                {
                    b.HasOne("MOCA.Core.Entities.LocationManagment.MeetingSpace", "MeetingSpace")
                        .WithMany("MeetingSpaceHourlyPricings")
                        .HasForeignKey("MeetingSpaceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOCA.Core.Entities.Shared.MemberType", "MemberType")
                        .WithMany()
                        .HasForeignKey("MemberTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MeetingSpace");

                    b.Navigation("MemberType");
                });

            modelBuilder.Entity("MOCA.Core.Entities.LocationManagment.ServiceFeePaymentsDueDate", b =>
                {
                    b.HasOne("MOCA.Core.Entities.LocationManagment.Location", "Location")
                        .WithMany("ServiceFeePaymentsDueDates")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("MOCA.Core.Entities.LocationManagment.SpaceAmenity", b =>
                {
                    b.HasOne("MOCA.Core.Entities.LocationManagment.Amenity", "Amenity")
                        .WithMany("SpaceAmenities")
                        .HasForeignKey("AmenityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOCA.Core.Entities.LocationManagment.Feature", "Feature")
                        .WithMany("SpaceAmenities")
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Amenity");

                    b.Navigation("Feature");
                });

            modelBuilder.Entity("MOCA.Core.Entities.LocationManagment.WorkSpace", b =>
                {
                    b.HasOne("MOCA.Core.Entities.LocationManagment.BuildingFloor", "BuildingFloor")
                        .WithMany()
                        .HasForeignKey("BuildingFloorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOCA.Core.Entities.LocationManagment.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOCA.Core.Entities.DynamicLists.WorkSpaceCategory", "WorkSpaceCategory")
                        .WithMany()
                        .HasForeignKey("WorkSpaceCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOCA.Core.Entities.DynamicLists.WorkSpaceType", "WorkSpaceType")
                        .WithMany("WorkSpaces")
                        .HasForeignKey("WorkSpaceTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BuildingFloor");

                    b.Navigation("Location");

                    b.Navigation("WorkSpaceCategory");

                    b.Navigation("WorkSpaceType");
                });

            modelBuilder.Entity("MOCA.Core.Entities.LocationManagment.WorkSpaceBundleMemberType", b =>
                {
                    b.HasOne("MOCA.Core.Entities.Shared.MemberType", "MemberType")
                        .WithMany("WorkSpaceBundleMemberships")
                        .HasForeignKey("MemberTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOCA.Core.Entities.LocationManagment.WorkSpaceBundlePricing", "WorkSpaceBundlePricing")
                        .WithMany()
                        .HasForeignKey("WorkSpaceBundleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MemberType");

                    b.Navigation("WorkSpaceBundlePricing");
                });

            modelBuilder.Entity("MOCA.Core.Entities.LocationManagment.WorkSpaceBundlePricing", b =>
                {
                    b.HasOne("MOCA.Core.Entities.LocationManagment.WorkSpace", "WorkSpace")
                        .WithMany("WorkSpaceBundlePricing")
                        .HasForeignKey("WorkSpaceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("WorkSpace");
                });

            modelBuilder.Entity("MOCA.Core.Entities.LocationManagment.WorkSpaceHourlyPricing", b =>
                {
                    b.HasOne("MOCA.Core.Entities.LocationManagment.WorkSpace", "WorkSpace")
                        .WithMany("WorkSpaceHourlyPricing")
                        .HasForeignKey("WorkSpaceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("WorkSpace");
                });

            modelBuilder.Entity("MOCA.Core.Entities.LocationManagment.WorkSpaceTailoredPricing", b =>
                {
                    b.HasOne("MOCA.Core.Entities.LocationManagment.WorkSpace", "WorkSpace")
                        .WithMany("WorkSpaceTailoredPricing")
                        .HasForeignKey("WorkSpaceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("WorkSpace");
                });

            modelBuilder.Entity("MOCA.Core.Entities.MeetingSpaceReservation.MeetingAttendee", b =>
                {
                    b.HasOne("MOCA.Core.Entities.MeetingSpaceReservation.MeetingReservation", "MeetingReservation")
                        .WithMany("MeetingAttendees")
                        .HasForeignKey("MeetingReservationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MeetingReservation");
                });

            modelBuilder.Entity("MOCA.Core.Entities.MeetingSpaceReservation.MeetingReservation", b =>
                {
                    b.HasOne("MOCA.Core.Entities.SSO.BasicUser", "BasicUser")
                        .WithMany("MeetingReservations")
                        .HasForeignKey("BasicUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOCA.Core.Entities.LocationManagment.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOCA.Core.Entities.LocationManagment.MeetingSpaceHourlyPricing", "MeetingSpaceHourlyPricing")
                        .WithMany()
                        .HasForeignKey("MeetingSpaceHourlyPricingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOCA.Core.Entities.LocationManagment.MeetingSpace", "MeetingSpace")
                        .WithMany("MeetingReservations")
                        .HasForeignKey("MeetingSpaceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOCA.Core.Entities.Shared.Reservations.PaymentMethod", "PaymentMethod")
                        .WithMany("MeetingSpaceReservations")
                        .HasForeignKey("PaymentMethodId");

                    b.Navigation("BasicUser");

                    b.Navigation("Location");

                    b.Navigation("MeetingSpace");

                    b.Navigation("MeetingSpaceHourlyPricing");

                    b.Navigation("PaymentMethod");
                });

            modelBuilder.Entity("MOCA.Core.Entities.MeetingSpaceReservation.MeetingReservationCancellation", b =>
                {
                    b.HasOne("MOCA.Core.Entities.Shared.Reservations.CancelReservation", "CancelReservation")
                        .WithMany()
                        .HasForeignKey("CancellationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOCA.Core.Entities.MeetingSpaceReservation.MeetingReservation", "MeetingReservation")
                        .WithOne("MeetingReservationCancellation")
                        .HasForeignKey("MOCA.Core.Entities.MeetingSpaceReservation.MeetingReservationCancellation", "MeetingReservationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CancelReservation");

                    b.Navigation("MeetingReservation");
                });

            modelBuilder.Entity("MOCA.Core.Entities.MeetingSpaceReservation.MeetingReservationTopUp", b =>
                {
                    b.HasOne("MOCA.Core.Entities.SSO.BasicUser", null)
                        .WithMany("MeetingReservationTopUps")
                        .HasForeignKey("BasicUserId");

                    b.HasOne("MOCA.Core.Entities.MeetingSpaceReservation.MeetingReservation", "MeetingReservation")
                        .WithMany("MeetingReservationTopUps")
                        .HasForeignKey("MeetingReservationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOCA.Core.Entities.LocationManagment.MeetingSpaceHourlyPricing", "MeetingSpaceHourlyPricing")
                        .WithMany()
                        .HasForeignKey("MeetingSpaceHourlyPricingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOCA.Core.Entities.Shared.Reservations.PaymentMethod", "PaymentMethod")
                        .WithMany("MeetingReservationTopUps")
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MeetingReservation");

                    b.Navigation("MeetingSpaceHourlyPricing");

                    b.Navigation("PaymentMethod");
                });

            modelBuilder.Entity("MOCA.Core.Entities.MeetingSpaceReservation.MeetingReservationTransaction", b =>
                {
                    b.HasOne("MOCA.Core.Entities.MeetingSpaceReservation.MeetingReservation", "MeetingReservation")
                        .WithOne("MeetingReservationTransaction")
                        .HasForeignKey("MOCA.Core.Entities.MeetingSpaceReservation.MeetingReservationTransaction", "MeetingReservationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOCA.Core.Entities.Shared.Reservations.ReservationTransaction", "ReservationTransaction")
                        .WithMany()
                        .HasForeignKey("ReservationTransactionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MeetingReservation");

                    b.Navigation("ReservationTransaction");
                });

            modelBuilder.Entity("MOCA.Core.Entities.MocaSetting.Category", b =>
                {
                    b.HasOne("MOCA.Core.Entities.LocationManagment.LocationType", "LobSpaceType")
                        .WithMany("Categories")
                        .HasForeignKey("LobSpaceTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LobSpaceType");
                });

            modelBuilder.Entity("MOCA.Core.Entities.MocaSetting.Faq", b =>
                {
                    b.HasOne("MOCA.Core.Entities.MocaSetting.Category", "Category")
                        .WithMany("Faqs")
                        .HasForeignKey("CategoryId");

                    b.HasOne("MOCA.Core.Entities.LocationManagment.LocationType", "LobSpaceType")
                        .WithMany("Faqs")
                        .HasForeignKey("LobSpaceTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("LobSpaceType");
                });

            modelBuilder.Entity("MOCA.Core.Entities.MocaSetting.IssueCaseStage", b =>
                {
                    b.HasOne("MOCA.Core.Entities.LocationManagment.LocationType", "LobSpaceType")
                        .WithMany("IssueCaseStages")
                        .HasForeignKey("LobSpaceTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOCA.Core.Entities.MocaSetting.IssueReport", "IssueReport")
                        .WithMany()
                        .HasForeignKey("Id", "LastModifiedAt")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("IssueReport");

                    b.Navigation("LobSpaceType");
                });

            modelBuilder.Entity("MOCA.Core.Entities.MocaSetting.IssueReport", b =>
                {
                    b.HasOne("MOCA.Core.Entities.MocaSetting.CaseType", "CaseType")
                        .WithMany()
                        .HasForeignKey("CaseTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOCA.Core.Entities.SSO.Identity.Admin", "ReportedBy")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOCA.Core.Entities.MocaSetting.Severity", "Severity")
                        .WithMany()
                        .HasForeignKey("LevelSeverityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOCA.Core.Entities.LocationManagment.LocationType", "LobSpaceType")
                        .WithMany("IssueReports")
                        .HasForeignKey("LobSpaceTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOCA.Core.Entities.LocationManagment.Location", "Location")
                        .WithMany("IssueReports")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOCA.Core.Entities.SSO.Identity.Admin", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOCA.Core.Entities.MocaSetting.Priority", "Priority")
                        .WithMany()
                        .HasForeignKey("PriorityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOCA.Core.Entities.MocaSetting.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CaseType");

                    b.Navigation("LobSpaceType");

                    b.Navigation("Location");

                    b.Navigation("Owner");

                    b.Navigation("Priority");

                    b.Navigation("ReportedBy");

                    b.Navigation("Severity");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("MOCA.Core.Entities.MocaSetting.Plan", b =>
                {
                    b.HasOne("MOCA.Core.Entities.LocationManagment.LocationType", "LobSpaceType")
                        .WithMany("Plans")
                        .HasForeignKey("LobSpaceTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOCA.Core.Entities.MocaSetting.PlanType", "PlanType")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LobSpaceType");

                    b.Navigation("PlanType");
                });

            modelBuilder.Entity("MOCA.Core.Entities.MocaSetting.Policy", b =>
                {
                    b.HasOne("MOCA.Core.Entities.LocationManagment.LocationType", "LobSpaceType")
                        .WithMany("Plocies")
                        .HasForeignKey("LobSpaceTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOCA.Core.Entities.MocaSetting.PolicyType", "PolicyType")
                        .WithOne("Policy")
                        .HasForeignKey("MOCA.Core.Entities.MocaSetting.Policy", "PolicyTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LobSpaceType");

                    b.Navigation("PolicyType");
                });

            modelBuilder.Entity("MOCA.Core.Entities.MocaSetting.TopUp", b =>
                {
                    b.HasOne("MOCA.Core.Entities.LocationManagment.LocationType", "LobSpaceType")
                        .WithMany("TopUps")
                        .HasForeignKey("LobSpaceTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOCA.Core.Entities.MocaSetting.TopUpType", "TopUpType")
                        .WithMany()
                        .HasForeignKey("TopUpTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LobSpaceType");

                    b.Navigation("TopUpType");
                });

            modelBuilder.Entity("MOCA.Core.Entities.MocaSetting.Wifi", b =>
                {
                    b.HasOne("MOCA.Core.Entities.LocationManagment.LocationType", "LobSpaceType")
                        .WithMany("Wifi")
                        .HasForeignKey("LobSpaceTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LobSpaceType");
                });

            modelBuilder.Entity("MOCA.Core.Entities.Shared.Reservations.CancelReservation", b =>
                {
                    b.HasOne("MOCA.Core.Entities.SSO.Identity.Admin", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOCA.Core.Entities.SSO.BasicUser", "BasicUser")
                        .WithMany()
                        .HasForeignKey("BasicUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOCA.Core.Entities.Shared.Reservations.ReservationType", "ReservationType")
                        .WithMany("CancelReservations")
                        .HasForeignKey("ReservationTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("BasicUser");

                    b.Navigation("ReservationType");
                });

            modelBuilder.Entity("MOCA.Core.Entities.Shared.Reservations.ReservationDetail", b =>
                {
                    b.HasOne("MOCA.Core.Entities.SSO.BasicUser", null)
                        .WithMany("ReservationDetails")
                        .HasForeignKey("BasicUserId");

                    b.HasOne("MOCA.Core.Entities.Shared.Reservations.ReservationTransaction", "ReservationTransaction")
                        .WithMany("ReservationDetails")
                        .HasForeignKey("ReservationTransactionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ReservationTransaction");
                });

            modelBuilder.Entity("MOCA.Core.Entities.Shared.Reservations.ReservationTransaction", b =>
                {
                    b.HasOne("MOCA.Core.Entities.SSO.BasicUser", "BasicUser")
                        .WithMany()
                        .HasForeignKey("BasicUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOCA.Core.Entities.LocationManagment.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOCA.Core.Entities.Shared.Reservations.ReservationType", "ReservationType")
                        .WithMany("ReservationTransactions")
                        .HasForeignKey("ReservationTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BasicUser");

                    b.Navigation("Location");

                    b.Navigation("ReservationType");
                });

            modelBuilder.Entity("MOCA.Core.Entities.SSO.BasicUser", b =>
                {
                    b.HasOne("MOCA.Core.Entities.LocationManagment.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOCA.Core.Entities.SSO.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOCA.Core.Entities.SSO.MemberShipTypes", "MemberShipTypes")
                        .WithMany()
                        .HasForeignKey("MemberShipTypesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOCA.Core.Entities.SSO.MemberShipCategories", "MembershipCategory")
                        .WithMany()
                        .HasForeignKey("MembershipCategoryId");

                    b.HasOne("MOCA.Core.Entities.SSO.ClientDevice", "UserDevice")
                        .WithOne("BasicUser")
                        .HasForeignKey("MOCA.Core.Entities.SSO.BasicUser", "UserDeviceId");

                    b.Navigation("Country");

                    b.Navigation("Gender");

                    b.Navigation("MemberShipTypes");

                    b.Navigation("MembershipCategory");

                    b.Navigation("UserDevice");
                });

            modelBuilder.Entity("MOCA.Core.Entities.SSO.Identity.AdminRoleClaim", b =>
                {
                    b.HasOne("MOCA.Core.Entities.SSO.Identity.AdminRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MOCA.Core.Entities.SSO.Identity.AdminUserClaim", b =>
                {
                    b.HasOne("MOCA.Core.Entities.SSO.Identity.Admin", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MOCA.Core.Entities.SSO.MemberShipCategories", b =>
                {
                    b.HasOne("MOCA.Core.Entities.SSO.MemberShipBenefitsTypes", "BenefitType")
                        .WithMany()
                        .HasForeignKey("BenefitTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOCA.Core.Entities.SSO.MemberShipMainCategories", "MainCategory")
                        .WithMany()
                        .HasForeignKey("MainCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BenefitType");

                    b.Navigation("MainCategory");
                });

            modelBuilder.Entity("MOCA.Core.Entities.WorkSpaceReservations.CoWorkSpace.CoworkingSpaceBundleCancellation", b =>
                {
                    b.HasOne("MOCA.Core.Entities.Shared.Reservations.CancelReservation", "CancelReservation")
                        .WithOne("CoworkingSpaceBundleCancellation")
                        .HasForeignKey("MOCA.Core.Entities.WorkSpaceReservations.CoWorkSpace.CoworkingSpaceBundleCancellation", "CancellationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOCA.Core.Entities.WorkSpaceReservations.CoWorkSpace.CoworkingSpaceReservationBundle", "CoworkingSpaceReservationBundle")
                        .WithOne("CoworkingSpaceBundleCancellation")
                        .HasForeignKey("MOCA.Core.Entities.WorkSpaceReservations.CoWorkSpace.CoworkingSpaceBundleCancellation", "CoworkingSpaceReservationBundleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CancelReservation");

                    b.Navigation("CoworkingSpaceReservationBundle");
                });

            modelBuilder.Entity("MOCA.Core.Entities.WorkSpaceReservations.CoWorkSpace.CoworkingSpaceBundleTransaction", b =>
                {
                    b.HasOne("MOCA.Core.Entities.WorkSpaceReservations.CoWorkSpace.CoworkingSpaceReservationBundle", "CoworkingSpaceReservationBundle")
                        .WithOne("CoworkingSpaceBundleTransaction")
                        .HasForeignKey("MOCA.Core.Entities.WorkSpaceReservations.CoWorkSpace.CoworkingSpaceBundleTransaction", "CoworkingSpaceReservationBundleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOCA.Core.Entities.Shared.Reservations.ReservationTransaction", "ReservationTransaction")
                        .WithOne("CoworkingSpaceBundleTransaction")
                        .HasForeignKey("MOCA.Core.Entities.WorkSpaceReservations.CoWorkSpace.CoworkingSpaceBundleTransaction", "ReservationTransactionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CoworkingSpaceReservationBundle");

                    b.Navigation("ReservationTransaction");
                });

            modelBuilder.Entity("MOCA.Core.Entities.WorkSpaceReservations.CoWorkSpace.CoworkingSpaceHourlyCancellation", b =>
                {
                    b.HasOne("MOCA.Core.Entities.Shared.Reservations.CancelReservation", "CancelReservation")
                        .WithOne("CoworkingSpaceHourlyCancellation")
                        .HasForeignKey("MOCA.Core.Entities.WorkSpaceReservations.CoWorkSpace.CoworkingSpaceHourlyCancellation", "CancellationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOCA.Core.Entities.WorkSpaceReservations.CoWorkSpace.CoworkingSpaceReservationHourly", "CoworkingSpaceReservationHourly")
                        .WithOne("CoworkingSpaceHourlyCancellation")
                        .HasForeignKey("MOCA.Core.Entities.WorkSpaceReservations.CoWorkSpace.CoworkingSpaceHourlyCancellation", "CoworkingSpaceReservationHourlyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CancelReservation");

                    b.Navigation("CoworkingSpaceReservationHourly");
                });

            modelBuilder.Entity("MOCA.Core.Entities.WorkSpaceReservations.CoWorkSpace.CoworkingSpaceHourlyTop", b =>
                {
                    b.HasOne("MOCA.Core.Entities.WorkSpaceReservations.CoWorkSpace.CoworkingSpaceReservationHourly", "CoworkingSpaceReservation")
                        .WithMany("TopUps")
                        .HasForeignKey("CoworkingSpaceReservationHourlyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOCA.Core.Entities.LocationManagment.CoWorkingSpaceHourlyPricing", "CoWorkingSpaceHourlyPricing")
                        .WithMany()
                        .HasForeignKey("HourId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOCA.Core.Entities.Shared.Reservations.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CoWorkingSpaceHourlyPricing");

                    b.Navigation("CoworkingSpaceReservation");

                    b.Navigation("PaymentMethod");
                });

            modelBuilder.Entity("MOCA.Core.Entities.WorkSpaceReservations.CoWorkSpace.CoworkingSpaceHourlyTransaction", b =>
                {
                    b.HasOne("MOCA.Core.Entities.WorkSpaceReservations.CoWorkSpace.CoworkingSpaceReservationHourly", "CoworkingSpaceReservationHourly")
                        .WithOne("CoworkingSpaceHourlyTransaction")
                        .HasForeignKey("MOCA.Core.Entities.WorkSpaceReservations.CoWorkSpace.CoworkingSpaceHourlyTransaction", "CoworkingSpaceReservationHourlyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOCA.Core.Entities.Shared.Reservations.ReservationTransaction", "ReservationTransaction")
                        .WithOne("CoworkingSpaceHourlyTransaction")
                        .HasForeignKey("MOCA.Core.Entities.WorkSpaceReservations.CoWorkSpace.CoworkingSpaceHourlyTransaction", "ReservationTransactionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CoworkingSpaceReservationHourly");

                    b.Navigation("ReservationTransaction");
                });

            modelBuilder.Entity("MOCA.Core.Entities.WorkSpaceReservations.CoWorkSpace.CoworkingSpaceReservationBundle", b =>
                {
                    b.HasOne("MOCA.Core.Entities.SSO.BasicUser", "BasicUser")
                        .WithMany()
                        .HasForeignKey("BasicUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOCA.Core.Entities.LocationManagment.CoworkingSpaceBundlePricing", "CoworkingSpaceBundlePricing")
                        .WithMany()
                        .HasForeignKey("BundleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOCA.Core.Entities.LocationManagment.CoworkingWorkSpace", "CoworkingWorkSpace")
                        .WithMany()
                        .HasForeignKey("CoworkSpaceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOCA.Core.Entities.LocationManagment.Coworking", null)
                        .WithMany("CoworkingSpaceReservationBundles")
                        .HasForeignKey("CoworkingId");

                    b.HasOne("MOCA.Core.Entities.LocationManagment.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOCA.Core.Entities.Shared.Reservations.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId");

                    b.Navigation("BasicUser");

                    b.Navigation("CoworkingSpaceBundlePricing");

                    b.Navigation("CoworkingWorkSpace");

                    b.Navigation("Location");

                    b.Navigation("PaymentMethod");
                });

            modelBuilder.Entity("MOCA.Core.Entities.WorkSpaceReservations.CoWorkSpace.CoworkingSpaceReservationHourly", b =>
                {
                    b.HasOne("MOCA.Core.Entities.SSO.BasicUser", "BasicUser")
                        .WithMany()
                        .HasForeignKey("BasicUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOCA.Core.Entities.LocationManagment.CoworkingWorkSpace", "CoworkingWorkSpace")
                        .WithMany()
                        .HasForeignKey("CoworkSpaceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOCA.Core.Entities.LocationManagment.Coworking", null)
                        .WithMany("CoworkingSpaceReservationHourlies")
                        .HasForeignKey("CoworkingId");

                    b.HasOne("MOCA.Core.Entities.LocationManagment.CoWorkingSpaceHourlyPricing", "CoWorkingSpaceHourlyPricing")
                        .WithMany()
                        .HasForeignKey("HourId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOCA.Core.Entities.LocationManagment.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOCA.Core.Entities.Shared.Reservations.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId");

                    b.Navigation("BasicUser");

                    b.Navigation("CoWorkingSpaceHourlyPricing");

                    b.Navigation("CoworkingWorkSpace");

                    b.Navigation("Location");

                    b.Navigation("PaymentMethod");
                });

            modelBuilder.Entity("MOCA.Core.Entities.WorkSpaceReservations.CoWorkSpace.CoworkingSpaceReservationTailored", b =>
                {
                    b.HasOne("MOCA.Core.Entities.SSO.BasicUser", "BasicUser")
                        .WithMany()
                        .HasForeignKey("BasicUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOCA.Core.Entities.LocationManagment.CoworkingWorkSpace", "CoworkingWorkSpace")
                        .WithMany()
                        .HasForeignKey("CoworkSpaceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOCA.Core.Entities.LocationManagment.Coworking", null)
                        .WithMany("CoworkingSpaceReservationTailoreds")
                        .HasForeignKey("CoworkingId");

                    b.HasOne("MOCA.Core.Entities.LocationManagment.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOCA.Core.Entities.Shared.Reservations.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId");

                    b.Navigation("BasicUser");

                    b.Navigation("CoworkingWorkSpace");

                    b.Navigation("Location");

                    b.Navigation("PaymentMethod");
                });

            modelBuilder.Entity("MOCA.Core.Entities.WorkSpaceReservations.CoWorkSpace.CoworkingSpaceTailoredCancellation", b =>
                {
                    b.HasOne("MOCA.Core.Entities.Shared.Reservations.CancelReservation", "CancelReservation")
                        .WithOne("CoworkingSpaceTailoredCancellation")
                        .HasForeignKey("MOCA.Core.Entities.WorkSpaceReservations.CoWorkSpace.CoworkingSpaceTailoredCancellation", "CancellationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOCA.Core.Entities.WorkSpaceReservations.CoWorkSpace.CoworkingSpaceReservationTailored", "CoworkingSpaceReservationTailored")
                        .WithOne("CoworkingSpaceTailoredCancellation")
                        .HasForeignKey("MOCA.Core.Entities.WorkSpaceReservations.CoWorkSpace.CoworkingSpaceTailoredCancellation", "CoworkingSpaceReservationTailoredId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CancelReservation");

                    b.Navigation("CoworkingSpaceReservationTailored");
                });

            modelBuilder.Entity("MOCA.Core.Entities.WorkSpaceReservations.CoWorkSpace.CoworkingSpaceTailoredTopUp", b =>
                {
                    b.HasOne("MOCA.Core.Entities.WorkSpaceReservations.CoWorkSpace.CoworkingSpaceReservationTailored", "CoworkingSpaceReservation")
                        .WithMany("TopUps")
                        .HasForeignKey("CoworkingSpaceReservationTailoredId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOCA.Core.Entities.Shared.Reservations.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CoworkingSpaceReservation");

                    b.Navigation("PaymentMethod");
                });

            modelBuilder.Entity("MOCA.Core.Entities.WorkSpaceReservations.CoWorkSpace.CoworkingSpaceTailoredTransaction", b =>
                {
                    b.HasOne("MOCA.Core.Entities.WorkSpaceReservations.CoWorkSpace.CoworkingSpaceReservationTailored", "CoworkingSpaceReservationTailored")
                        .WithOne("CoworkingSpaceTailoredTransaction")
                        .HasForeignKey("MOCA.Core.Entities.WorkSpaceReservations.CoWorkSpace.CoworkingSpaceTailoredTransaction", "CoworkingSpaceReservationTailoredId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOCA.Core.Entities.Shared.Reservations.ReservationTransaction", "ReservationTransaction")
                        .WithOne("CoworkingSpaceTailoredTransaction")
                        .HasForeignKey("MOCA.Core.Entities.WorkSpaceReservations.CoWorkSpace.CoworkingSpaceTailoredTransaction", "ReservationTransactionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CoworkingSpaceReservationTailored");

                    b.Navigation("ReservationTransaction");
                });

            modelBuilder.Entity("MOCA.Core.Entities.WorkSpaceReservations.WorkSpaces.WorkSpaceBundleCancellation", b =>
                {
                    b.HasOne("MOCA.Core.Entities.Shared.Reservations.CancelReservation", "CancelReservation")
                        .WithOne("WorkSpaceBundleCancellation")
                        .HasForeignKey("MOCA.Core.Entities.WorkSpaceReservations.WorkSpaces.WorkSpaceBundleCancellation", "CancellationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOCA.Core.Entities.WorkSpaceReservations.WorkSpaces.WorkSpaceReservationBundle", "WorkSpaceReservationBundle")
                        .WithOne("WorkSpaceBundleCancellation")
                        .HasForeignKey("MOCA.Core.Entities.WorkSpaceReservations.WorkSpaces.WorkSpaceBundleCancellation", "WorkSpaceBundleReservationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CancelReservation");

                    b.Navigation("WorkSpaceReservationBundle");
                });

            modelBuilder.Entity("MOCA.Core.Entities.WorkSpaceReservations.WorkSpaces.WorkSpaceBundleTransaction", b =>
                {
                    b.HasOne("MOCA.Core.Entities.Shared.Reservations.ReservationTransaction", "ReservationTransaction")
                        .WithOne("WorkSpaceBundleTransaction")
                        .HasForeignKey("MOCA.Core.Entities.WorkSpaceReservations.WorkSpaces.WorkSpaceBundleTransaction", "ReservationTransactionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOCA.Core.Entities.WorkSpaceReservations.WorkSpaces.WorkSpaceReservationBundle", "WorkSpaceReservationBundle")
                        .WithOne("WorkSpaceBundleTransactions")
                        .HasForeignKey("MOCA.Core.Entities.WorkSpaceReservations.WorkSpaces.WorkSpaceBundleTransaction", "WorkSpaceReservationBundleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ReservationTransaction");

                    b.Navigation("WorkSpaceReservationBundle");
                });

            modelBuilder.Entity("MOCA.Core.Entities.WorkSpaceReservations.WorkSpaces.WorkSpaceHourlyCancellation", b =>
                {
                    b.HasOne("MOCA.Core.Entities.Shared.Reservations.CancelReservation", "CancelReservation")
                        .WithOne("WorkSpaceHourlyCancellation")
                        .HasForeignKey("MOCA.Core.Entities.WorkSpaceReservations.WorkSpaces.WorkSpaceHourlyCancellation", "CancellationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOCA.Core.Entities.WorkSpaceReservations.WorkSpaces.WorkSpaceReservationHourly", "WorkSpaceReservationHourly")
                        .WithOne("WorkSpaceHourlyCancellation")
                        .HasForeignKey("MOCA.Core.Entities.WorkSpaceReservations.WorkSpaces.WorkSpaceHourlyCancellation", "WorkSpaceHourlyReservationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CancelReservation");

                    b.Navigation("WorkSpaceReservationHourly");
                });

            modelBuilder.Entity("MOCA.Core.Entities.WorkSpaceReservations.WorkSpaces.WorkSpaceHourlyTopUp", b =>
                {
                    b.HasOne("MOCA.Core.Entities.SSO.BasicUser", null)
                        .WithMany("WorkSpaceHourlyTopUps")
                        .HasForeignKey("BasicUserId");

                    b.HasOne("MOCA.Core.Entities.LocationManagment.WorkSpaceHourlyPricing", "WorkSpaceHourlyPricing")
                        .WithMany()
                        .HasForeignKey("HourId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOCA.Core.Entities.Shared.Reservations.PaymentMethod", "PaymentMethod")
                        .WithMany("WorkSpaceHourlyTopUps")
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOCA.Core.Entities.WorkSpaceReservations.WorkSpaces.WorkSpaceReservationHourly", "WorkSpaceReservation")
                        .WithMany("TopUps")
                        .HasForeignKey("WorkSpaceReservationHourlyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PaymentMethod");

                    b.Navigation("WorkSpaceHourlyPricing");

                    b.Navigation("WorkSpaceReservation");
                });

            modelBuilder.Entity("MOCA.Core.Entities.WorkSpaceReservations.WorkSpaces.WorkSpaceHourlyTransaction", b =>
                {
                    b.HasOne("MOCA.Core.Entities.Shared.Reservations.ReservationTransaction", "ReservationTransaction")
                        .WithOne("WorkSpaceHourlyTransaction")
                        .HasForeignKey("MOCA.Core.Entities.WorkSpaceReservations.WorkSpaces.WorkSpaceHourlyTransaction", "ReservationTransactionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOCA.Core.Entities.WorkSpaceReservations.WorkSpaces.WorkSpaceReservationHourly", "WorkSpaceReservationHourly")
                        .WithOne("WorkSpaceHourlyTransactions")
                        .HasForeignKey("MOCA.Core.Entities.WorkSpaceReservations.WorkSpaces.WorkSpaceHourlyTransaction", "WorkSpaceReservationHourlyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ReservationTransaction");

                    b.Navigation("WorkSpaceReservationHourly");
                });

            modelBuilder.Entity("MOCA.Core.Entities.WorkSpaceReservations.WorkSpaces.WorkSpaceReservationBundle", b =>
                {
                    b.HasOne("MOCA.Core.Entities.SSO.BasicUser", "BasicUser")
                        .WithMany("WorkSpaceBundleReservations")
                        .HasForeignKey("BasicUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOCA.Core.Entities.LocationManagment.WorkSpaceBundlePricing", "WorkSpaceBundlePricing")
                        .WithMany()
                        .HasForeignKey("BundleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOCA.Core.Entities.LocationManagment.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOCA.Core.Entities.Shared.Reservations.PaymentMethod", "PaymentMethod")
                        .WithMany("WorkSpaceBundleReservations")
                        .HasForeignKey("PaymentMethodId");

                    b.HasOne("MOCA.Core.Entities.LocationManagment.WorkSpace", "WorkSpace")
                        .WithMany("WorkSpaceReservationBundles")
                        .HasForeignKey("WorkSpaceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BasicUser");

                    b.Navigation("Location");

                    b.Navigation("PaymentMethod");

                    b.Navigation("WorkSpace");

                    b.Navigation("WorkSpaceBundlePricing");
                });

            modelBuilder.Entity("MOCA.Core.Entities.WorkSpaceReservations.WorkSpaces.WorkSpaceReservationHourly", b =>
                {
                    b.HasOne("MOCA.Core.Entities.SSO.BasicUser", "BasicUser")
                        .WithMany("WorkSpaceHourlyReservations")
                        .HasForeignKey("BasicUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOCA.Core.Entities.LocationManagment.WorkSpaceHourlyPricing", "WorkSpaceHourlyPricing")
                        .WithMany()
                        .HasForeignKey("HourId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOCA.Core.Entities.LocationManagment.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOCA.Core.Entities.Shared.Reservations.PaymentMethod", "PaymentMethod")
                        .WithMany("WorkSpaceHourlyReservations")
                        .HasForeignKey("PaymentMethodId");

                    b.HasOne("MOCA.Core.Entities.LocationManagment.WorkSpace", "WorkSpace")
                        .WithMany("WorkSpaceReservationHourlies")
                        .HasForeignKey("WorkSpaceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BasicUser");

                    b.Navigation("Location");

                    b.Navigation("PaymentMethod");

                    b.Navigation("WorkSpace");

                    b.Navigation("WorkSpaceHourlyPricing");
                });

            modelBuilder.Entity("MOCA.Core.Entities.WorkSpaceReservations.WorkSpaces.WorkSpaceReservationTailored", b =>
                {
                    b.HasOne("MOCA.Core.Entities.SSO.BasicUser", "BasicUser")
                        .WithMany("WorkSpaceTailoredReservations")
                        .HasForeignKey("BasicUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOCA.Core.Entities.LocationManagment.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOCA.Core.Entities.Shared.Reservations.PaymentMethod", "PaymentMethod")
                        .WithMany("WorkSpaceTailoredReservations")
                        .HasForeignKey("PaymentMethodId");

                    b.HasOne("MOCA.Core.Entities.LocationManagment.WorkSpace", "WorkSpace")
                        .WithMany("WorkSpaceReservationTailoreds")
                        .HasForeignKey("WorkSpaceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BasicUser");

                    b.Navigation("Location");

                    b.Navigation("PaymentMethod");

                    b.Navigation("WorkSpace");
                });

            modelBuilder.Entity("MOCA.Core.Entities.WorkSpaceReservations.WorkSpaces.WorkSpaceTailoredCancellation", b =>
                {
                    b.HasOne("MOCA.Core.Entities.Shared.Reservations.CancelReservation", "CancelReservation")
                        .WithOne("WorkSpaceTailoredCancellation")
                        .HasForeignKey("MOCA.Core.Entities.WorkSpaceReservations.WorkSpaces.WorkSpaceTailoredCancellation", "CancellationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOCA.Core.Entities.WorkSpaceReservations.WorkSpaces.WorkSpaceReservationTailored", "WorkSpaceReservationTailored")
                        .WithOne("WorkSpaceTailoredCancellation")
                        .HasForeignKey("MOCA.Core.Entities.WorkSpaceReservations.WorkSpaces.WorkSpaceTailoredCancellation", "WorkSpaceTailoredReservationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CancelReservation");

                    b.Navigation("WorkSpaceReservationTailored");
                });

            modelBuilder.Entity("MOCA.Core.Entities.WorkSpaceReservations.WorkSpaces.WorkSpaceTailoredTopUp", b =>
                {
                    b.HasOne("MOCA.Core.Entities.SSO.BasicUser", null)
                        .WithMany("WorkSpaceTailoredTopUps")
                        .HasForeignKey("BasicUserId");

                    b.HasOne("MOCA.Core.Entities.Shared.Reservations.PaymentMethod", "PaymentMethod")
                        .WithMany("WorkSpaceTailoredTopUps")
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOCA.Core.Entities.WorkSpaceReservations.WorkSpaces.WorkSpaceReservationTailored", "WorkSpaceReservation")
                        .WithMany("TopUps")
                        .HasForeignKey("WorkSpaceReservationTailoredId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PaymentMethod");

                    b.Navigation("WorkSpaceReservation");
                });

            modelBuilder.Entity("MOCA.Core.Entities.WorkSpaceReservations.WorkSpaces.WorkSpaceTailoredTransaction", b =>
                {
                    b.HasOne("MOCA.Core.Entities.Shared.Reservations.ReservationTransaction", "ReservationTransaction")
                        .WithOne("WorkSpaceTailoredTransaction")
                        .HasForeignKey("MOCA.Core.Entities.WorkSpaceReservations.WorkSpaces.WorkSpaceTailoredTransaction", "ReservationTransactionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MOCA.Core.Entities.WorkSpaceReservations.WorkSpaces.WorkSpaceReservationTailored", "WorkSpaceReservationTailored")
                        .WithOne("WorkSpaceTailoredTransactions")
                        .HasForeignKey("MOCA.Core.Entities.WorkSpaceReservations.WorkSpaces.WorkSpaceTailoredTransaction", "WorkSpaceReservationTailoredId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ReservationTransaction");

                    b.Navigation("WorkSpaceReservationTailored");
                });

            modelBuilder.Entity("MOCA.Core.Entities.DynamicLists.WorkSpaceCategory", b =>
                {
                    b.Navigation("WorkSpaceTypes");
                });

            modelBuilder.Entity("MOCA.Core.Entities.DynamicLists.WorkSpaceType", b =>
                {
                    b.Navigation("WorkSpaces");
                });

            modelBuilder.Entity("MOCA.Core.Entities.EventSpaceBookings.ContactDetails", b =>
                {
                    b.Navigation("SendEmails");
                });

            modelBuilder.Entity("MOCA.Core.Entities.EventSpaceBookings.EventAttendance", b =>
                {
                    b.Navigation("EventSpaceBookings");
                });

            modelBuilder.Entity("MOCA.Core.Entities.EventSpaceBookings.EventCategory", b =>
                {
                    b.Navigation("EventSpaceBookings");
                });

            modelBuilder.Entity("MOCA.Core.Entities.EventSpaceBookings.EventOpportunityStatus", b =>
                {
                    b.Navigation("EventSpaceBookings");
                });

            modelBuilder.Entity("MOCA.Core.Entities.EventSpaceBookings.EventReccurance", b =>
                {
                    b.Navigation("EventSpaceBookings");
                });

            modelBuilder.Entity("MOCA.Core.Entities.EventSpaceBookings.EventRequester", b =>
                {
                    b.Navigation("EventSpaceBookings");
                });

            modelBuilder.Entity("MOCA.Core.Entities.EventSpaceBookings.EventSpaceBooking", b =>
                {
                    b.Navigation("EventSpaceTimes");

                    b.Navigation("EventSpaceVenues");

                    b.Navigation("SendEmails");
                });

            modelBuilder.Entity("MOCA.Core.Entities.EventSpaceBookings.EventType", b =>
                {
                    b.Navigation("EventSpaceBookings");
                });

            modelBuilder.Entity("MOCA.Core.Entities.EventSpaceBookings.Initiated", b =>
                {
                    b.Navigation("EventSpaceBookings");
                });

            modelBuilder.Entity("MOCA.Core.Entities.EventSpaceBookings.OpportunityStage", b =>
                {
                    b.Navigation("OpportunityStageReports");
                });

            modelBuilder.Entity("MOCA.Core.Entities.LocationManagment.Amenity", b =>
                {
                    b.Navigation("SpaceAmenities");
                });

            modelBuilder.Entity("MOCA.Core.Entities.LocationManagment.Building", b =>
                {
                    b.Navigation("BuildingFloors");
                });

            modelBuilder.Entity("MOCA.Core.Entities.LocationManagment.Coworking", b =>
                {
                    b.Navigation("CoWorkingSpaceHourlyPricings");

                    b.Navigation("CoworkingSpaceBundlePricings");

                    b.Navigation("CoworkingSpaceReservationBundles");

                    b.Navigation("CoworkingSpaceReservationHourlies");

                    b.Navigation("CoworkingSpaceReservationTailoreds");

                    b.Navigation("CoworkingSpaceTailoredPricings");
                });

            modelBuilder.Entity("MOCA.Core.Entities.LocationManagment.EventSpace", b =>
                {
                    b.Navigation("EventSpaceHourlyPricings");

                    b.Navigation("EventSpaceOccupancies");
                });

            modelBuilder.Entity("MOCA.Core.Entities.LocationManagment.Feature", b =>
                {
                    b.Navigation("Furnishings");

                    b.Navigation("MarketingImages");

                    b.Navigation("SpaceAmenities");
                });

            modelBuilder.Entity("MOCA.Core.Entities.LocationManagment.FurnishingType", b =>
                {
                    b.Navigation("Furnishings");
                });

            modelBuilder.Entity("MOCA.Core.Entities.LocationManagment.Industry", b =>
                {
                    b.Navigation("EventSpaceBookings");

                    b.Navigation("LocationIndustrys");
                });

            modelBuilder.Entity("MOCA.Core.Entities.LocationManagment.Location", b =>
                {
                    b.Navigation("Buildings");

                    b.Navigation("EventSpaceBookings");

                    b.Navigation("IssueReports");

                    b.Navigation("LocationContacts");

                    b.Navigation("LocationCurrencies");

                    b.Navigation("LocationFiles");

                    b.Navigation("LocationImages");

                    b.Navigation("LocationInclusions");

                    b.Navigation("LocationIndustries");

                    b.Navigation("LocationWorkingHours");

                    b.Navigation("ServiceFeePaymentsDueDates");
                });

            modelBuilder.Entity("MOCA.Core.Entities.LocationManagment.LocationType", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("EventSpaceBookings");

                    b.Navigation("Faqs");

                    b.Navigation("IssueCaseStages");

                    b.Navigation("IssueReports");

                    b.Navigation("Plans");

                    b.Navigation("Plocies");

                    b.Navigation("TopUps");

                    b.Navigation("Wifi");
                });

            modelBuilder.Entity("MOCA.Core.Entities.LocationManagment.MeetingSpace", b =>
                {
                    b.Navigation("MeetingReservations");

                    b.Navigation("MeetingSpaceHourlyPricings");
                });

            modelBuilder.Entity("MOCA.Core.Entities.LocationManagment.WorkSpace", b =>
                {
                    b.Navigation("WorkSpaceBundlePricing");

                    b.Navigation("WorkSpaceHourlyPricing");

                    b.Navigation("WorkSpaceReservationBundles");

                    b.Navigation("WorkSpaceReservationHourlies");

                    b.Navigation("WorkSpaceReservationTailoreds");

                    b.Navigation("WorkSpaceTailoredPricing");
                });

            modelBuilder.Entity("MOCA.Core.Entities.MeetingSpaceReservation.MeetingReservation", b =>
                {
                    b.Navigation("MeetingAttendees");

                    b.Navigation("MeetingReservationCancellation");

                    b.Navigation("MeetingReservationTopUps");

                    b.Navigation("MeetingReservationTransaction");
                });

            modelBuilder.Entity("MOCA.Core.Entities.MocaSetting.Category", b =>
                {
                    b.Navigation("Faqs");
                });

            modelBuilder.Entity("MOCA.Core.Entities.MocaSetting.PolicyType", b =>
                {
                    b.Navigation("Policy")
                        .IsRequired();
                });

            modelBuilder.Entity("MOCA.Core.Entities.Shared.MemberType", b =>
                {
                    b.Navigation("CoworkingSpaceBundleMemberTypes");

                    b.Navigation("WorkSpaceBundleMemberships");
                });

            modelBuilder.Entity("MOCA.Core.Entities.Shared.Reservations.CancelReservation", b =>
                {
                    b.Navigation("CoworkingSpaceBundleCancellation")
                        .IsRequired();

                    b.Navigation("CoworkingSpaceHourlyCancellation")
                        .IsRequired();

                    b.Navigation("CoworkingSpaceTailoredCancellation")
                        .IsRequired();

                    b.Navigation("WorkSpaceBundleCancellation")
                        .IsRequired();

                    b.Navigation("WorkSpaceHourlyCancellation")
                        .IsRequired();

                    b.Navigation("WorkSpaceTailoredCancellation")
                        .IsRequired();
                });

            modelBuilder.Entity("MOCA.Core.Entities.Shared.Reservations.PaymentMethod", b =>
                {
                    b.Navigation("MeetingReservationTopUps");

                    b.Navigation("MeetingSpaceReservations");

                    b.Navigation("WorkSpaceBundleReservations");

                    b.Navigation("WorkSpaceHourlyReservations");

                    b.Navigation("WorkSpaceHourlyTopUps");

                    b.Navigation("WorkSpaceTailoredReservations");

                    b.Navigation("WorkSpaceTailoredTopUps");
                });

            modelBuilder.Entity("MOCA.Core.Entities.Shared.Reservations.ReservationTransaction", b =>
                {
                    b.Navigation("CoworkingSpaceBundleTransaction")
                        .IsRequired();

                    b.Navigation("CoworkingSpaceHourlyTransaction")
                        .IsRequired();

                    b.Navigation("CoworkingSpaceTailoredTransaction")
                        .IsRequired();

                    b.Navigation("ReservationDetails");

                    b.Navigation("WorkSpaceBundleTransaction")
                        .IsRequired();

                    b.Navigation("WorkSpaceHourlyTransaction")
                        .IsRequired();

                    b.Navigation("WorkSpaceTailoredTransaction")
                        .IsRequired();
                });

            modelBuilder.Entity("MOCA.Core.Entities.Shared.Reservations.ReservationType", b =>
                {
                    b.Navigation("CancelReservations");

                    b.Navigation("ReservationTransactions");
                });

            modelBuilder.Entity("MOCA.Core.Entities.SSO.BasicUser", b =>
                {
                    b.Navigation("MeetingReservationTopUps");

                    b.Navigation("MeetingReservations");

                    b.Navigation("ReservationDetails");

                    b.Navigation("WorkSpaceBundleReservations");

                    b.Navigation("WorkSpaceHourlyReservations");

                    b.Navigation("WorkSpaceHourlyTopUps");

                    b.Navigation("WorkSpaceTailoredReservations");

                    b.Navigation("WorkSpaceTailoredTopUps");
                });

            modelBuilder.Entity("MOCA.Core.Entities.SSO.ClientDevice", b =>
                {
                    b.Navigation("BasicUser")
                        .IsRequired();
                });

            modelBuilder.Entity("MOCA.Core.Entities.WorkSpaceReservations.CoWorkSpace.CoworkingSpaceReservationBundle", b =>
                {
                    b.Navigation("CoworkingSpaceBundleCancellation")
                        .IsRequired();

                    b.Navigation("CoworkingSpaceBundleTransaction")
                        .IsRequired();
                });

            modelBuilder.Entity("MOCA.Core.Entities.WorkSpaceReservations.CoWorkSpace.CoworkingSpaceReservationHourly", b =>
                {
                    b.Navigation("CoworkingSpaceHourlyCancellation")
                        .IsRequired();

                    b.Navigation("CoworkingSpaceHourlyTransaction")
                        .IsRequired();

                    b.Navigation("TopUps");
                });

            modelBuilder.Entity("MOCA.Core.Entities.WorkSpaceReservations.CoWorkSpace.CoworkingSpaceReservationTailored", b =>
                {
                    b.Navigation("CoworkingSpaceTailoredCancellation")
                        .IsRequired();

                    b.Navigation("CoworkingSpaceTailoredTransaction")
                        .IsRequired();

                    b.Navigation("TopUps");
                });

            modelBuilder.Entity("MOCA.Core.Entities.WorkSpaceReservations.WorkSpaces.WorkSpaceReservationBundle", b =>
                {
                    b.Navigation("WorkSpaceBundleCancellation")
                        .IsRequired();

                    b.Navigation("WorkSpaceBundleTransactions")
                        .IsRequired();
                });

            modelBuilder.Entity("MOCA.Core.Entities.WorkSpaceReservations.WorkSpaces.WorkSpaceReservationHourly", b =>
                {
                    b.Navigation("TopUps");

                    b.Navigation("WorkSpaceHourlyCancellation")
                        .IsRequired();

                    b.Navigation("WorkSpaceHourlyTransactions")
                        .IsRequired();
                });

            modelBuilder.Entity("MOCA.Core.Entities.WorkSpaceReservations.WorkSpaces.WorkSpaceReservationTailored", b =>
                {
                    b.Navigation("TopUps");

                    b.Navigation("WorkSpaceTailoredCancellation")
                        .IsRequired();

                    b.Navigation("WorkSpaceTailoredTransactions")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
